STAGE 1: discover symbols
STAGE 2: process types
STAGE 3: process interfaces
STAGE 4: process input ports and service parameters
STAGE 5: process output ports and embeddings
STAGE 6: process behaviors
Adding config parameter for MyService
New tree: {
	param: void {
			a: 
				int {
					x: int 
				}
				|
				string 

			b: 
				double 
				|
				bool 
				|
				int 
		}
}

--------------------------
param.a << param.b
New tree: {
	param: void {
			a: 
				bool {
					x: int 
				}
				|
				int {
					x: int 
				}
				|
				double 
				|
				bool 
				|
				int 
				|
				double {
					x: int 
				}

			b: 
				double 
				|
				bool 
				|
				int 
		}
}

--------------------------
a = class jolie.lang.parse.ast.expression.ProductExpressionNode
deriving type of MULTIPLY void int
deriven type: int
deriving type of MODULUS int string
deriven type: int
New tree: {
	a: int 

	param: void {
			a: 
				bool {
					x: int 
				}
				|
				int {
					x: int 
				}
				|
				double 
				|
				bool 
				|
				int 
				|
				double {
					x: int 
				}

			b: 
				double 
				|
				bool 
				|
				int 
		}
}

--------------------------
b = class jolie.lang.parse.ast.expression.ProductExpressionNode
deriving type of MULTIPLY void int
deriven type: int
deriving type of DIVIDE int string
deriven type: int
New tree: {
	a: int 

	b: int 

	param: void {
			a: 
				bool {
					x: int 
				}
				|
				int {
					x: int 
				}
				|
				double 
				|
				bool 
				|
				int 
				|
				double {
					x: int 
				}

			b: 
				double 
				|
				bool 
				|
				int 
		}
}
WARNING: the operations 'int / string' and 'int % string' are only allowed if the string can be parsed to a number
WARNING: the operations 'int / string' and 'int % string' are only allowed if the string can be parsed to a number
